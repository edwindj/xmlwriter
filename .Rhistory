)
)
expect_equal(
as.character(fragment),
"<person><name>John Doe</name><age>30</age><address><street>123 Main St</street><city>Springfield</city></address>This is a text node</person><person><name>Jane Doe</name><age>25</age><address><street>123 Main St</street><city>Springfield</city></address>This is a text node</person>"
)
doc <- xml_doc(
person = .elem(
name = "John Doe",
age = 30,
address = .elem(street = "123 Main St", city = "Springfield"),
"This is a text node"
),
person = .elem(
name = "Jane Doe",
age = 25,
address = .elem(street = "123 Main St", city = "Springfield"),
"This is a text node"
)
)
expect_error(
doc <- xml_doc(
person = .elem(
name = "John Doe",
age = 30,
address = .elem(street = "123 Main St", city = "Springfield"),
"This is a text node"
),
person = .elem(
name = "Jane Doe",
age = 25,
address = .elem(street = "123 Main St", city = "Springfield"),
"This is a text node"
)
)
)
devtools::load_all(".")
b <- xmlbuilder(allow_fragments = FALSE)
b$comment("This is an xml comment")
b$start("homeless")
b$start("person", id = "1")
b$element("name", "John Doe")
b$element("age", 30)
b$start("address")
b$element("street", "123 Main St")
b$element("city", "Anytown")
b$element("state", "CA")
b$element("zip", 12345)
b$end()
b$end()
b$start("person", id = "2")
b$element("name", "Jane Doe")
b$element("age", 25)
b$start("address")
b$element("street", "321 Main St")
b$element("city", "Anytown")
b$element("state", "CA")
b$element("zip", 54321)
b$end()
b$end()
b$end()
# includes a xml prolog and comment
b
as.character(b)
# includes a xml prolog and comment
b
._ <- function(...){print(... )}
._(a=1)
devtools::load_all(".")
xml_fragment(a = ._(b = "text"))
._ <- .elem
xml_fragment(a = ._(b = "text"))
xml_fragment(a = ._(b = "text"))
xml_fragment(a = ._(b = "text", .attr=c(id = "2")))
xml_fragment(a = .elem(b = "text", .attr=c(id = "2")))
xml_fragment(a = ._(b = "text", .attr=c(id = "2")))
xml_fragment(a = ._(b = "text", .attr=c(id = "2")), c = "tet")
xml_fragment(list(a = 1))
_>
._
._.>
.<
._<
.has
xml_fragment(elem(fiets, "test"))
doc <- xml_fragment(a = 1, b = 2)
doc
doc <- xml_fragment(a = 1, b = .elem(b1=2))
doc
doc <- xml_fragment(a = 1, b = ._(b1=2))
doc <- xml_fragment(a = 1, b = .is(b1=2))
is
.is
node
._
xml_doc(a = 1, b=.elem(b1 =2))
xml_fragment(a = 1, b=.elem(b1 =2))
xml_fragment(a = 1, b=.elem(b1 =2), list(a=1))
devtools::load_all(".")
xml_fragment(a = 1, b=.elem(b1 =2), list(a=1))
.elem()
.elem(a = 1)
xml_fragment()
xml_fragment(a = 1)
xml_fragment()
devtools::load_all(".")
xml_fragment()
devtools::load_all(".")
xml_fragment()
xml_fragment(a = 1)
xml_fragment(a = 1, list(b=3))
devtools::load_all(".")
xml_fragment(a = 1, list(b=3))
xml_fragment(a = 1, list(b=3)) |> str()
devtools::load_all(".")
xml_fragment(a = 1, list(b=3)) |> str()
devtools::load_all(".")
xml_fragment(a = 1, list(b=3)) |> str()
devtools::load_all(".")
xml_fragment(a = 1, list(b=3)) |> str()
devtools::load_all(".")
xml_fragment(a = 1, list(b=3)) |> str()
devtools::load_all(".")
xml_fragment(a = 1, list(b=3)) |> str()
devtools::load_all(".")
xml_fragment(a = 1, list(b=3)) |> str()
xml_fragment(a = 1, list(b=3))
xml_fragment(a = 1, list(b=3))
xml_fragment(a = 1, list(b=3)) |> str()
devtools::load_all(".")
xml_fragment(a = 1, list(b=3)) |> str()
xml_fragment(a = 1, a = list(b=3))
xml_fragment(a = 1, a = .elem(b=3))
xml_fragment(a = 1, a = ._(b=3))
xml_fragment(a = 1, a = .elem(b=3))
c.xml_fragment <- function(...){
l <- list(...)
# keep the class
cls <- sapply(l, class)
l <- lapply(l, unclass)
l <- do.call("c", l)
class(l) <- cls[1]
l
}
xml_fragment(a = 1)
xml_fragment(a = 1, b = .elem(c = 1))
c(xml_fragment(a = 1, b = .elem(c = 1)))
c(xml_fragment(a = 1, b = .elem(c = 1)), xml_fragment(d = 3))
c(xml_fragment(a = 1, b = .elem(c = 1)), xml_fragment(d = 3))
c(xml_fragment(a = 1, b = .elem(c = 1)), xml_fragment(d = 3)) |> as_xml_nodeset()
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
library(tinytest)
test_all()
test_all()
a <- list()
b <- c(a, w = 1)
b
a <- list(a=5)
b <- c(a, w = 1)
b
b <- c(a, list(w = 1))
b
study <- xml_fragment(
study = ""
)
study
study_xml <- xml_fragment(
study = ""
)
study
print(study)
study_xml <- xml_fragment(
study = ""
)
as.character(study_xml)
print(study_xml)
devtools::load_all(".")
print(study_xml)
devtools::load_all(".")
print(study_xml)
devtools::load_all(".")
print(study_xml)
study_xml$study
c(study_xml$study, person=.elem(name="John"))
lapply(1:2, function(x){l <- list(x)})
lapply(1:2, function(x){l <- list(x)
names(l) <- LETTERS[x]
l})
l})
lapply(1:2, function(x){l <- list(x)
l})
lapply(1:2, function(x){l <- list(x)
l}) |> str()
lapply(1:2, function(x){l <- list(x)
lapply(1:2, function(x){l <- list(x)
names(l) <- LETTERS[x]
l}) -> A
A
unlist(A)
unlist(A, recursive = F)
source("~/Documents/R/xmlwriter/inst/tinytest/test_xmlwriter.R", echo=TRUE)
library(tinytest)
library(xmlwriter)
library(tinytest)
devtools::load_all(".")
source("~/Documents/R/xmlwriter/inst/tinytest/test_xmlwriter.R", echo=TRUE)
expect_equal(as.character(x), "<person id=\"1\"><name>John Doe</name></person>")
test_that("xmlbuilder", {
expect_equal(s, "<person id=\"1\"><name>John Doe</name></person>")
})
expect_error(
doc <- xml_doc(
person = .elem(
name = "John Doe",
age = 30,
address = .elem(street = "123 Main St", city = "Springfield"),
"This is a text node"
),
person = .elem(
name = "Jane Doe",
age = 25,
address = .elem(street = "123 Main St", city = "Springfield"),
"This is a text node"
)
)
)
doc <- xml_doc(
person = .elem(
name = "John Doe",
age = 30,
address = .elem(street = "123 Main St", city = "Springfield"),
"This is a text node"
),
person = .elem(
name = "Jane Doe",
age = 25,
address = .elem(street = "123 Main St", city = "Springfield"),
"This is a text node"
)
)
devtools::load_all(".")
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
b <- xmlbuilder(allow_fragments = FALSE)
b$comment("This is an xml comment")
b$start("homeless")
b$start("person", id = "1")
b$element("name", "John Doe")
b$element("age", 30)
b$start("address")
b$element("street", "123 Main St")
b$element("city", "Anytown")
b$element("state", "CA")
b$element("zip", 12345)
b$end("address")
b$end("person")
b$start("person", id = "2")
b$element("name", "Jane Doe")
b$element("age", 25)
b$start("address")
b$element("street", "321 Main St")
b$element("city", "Anytown")
b$element("state", "CA")
b$element("zip", 54321)
b$end("address")
b$end("person")
b$end("homeless")
# includes a xml prolog and comment
b
as.character(b)
# only contains the actual nodes
xml2::as_xml_document(b)
devtools::run_examples()
devtools::load_all(".")
source("~/Documents/R/xmlwriter/inst/tinytest/test_xmlwriter.R", echo=TRUE)
devtools::load_all(".")
pkgload::dev_help('.tags')
devtools::load_all(".")
pkgload::dev_help('.tags')
devtools::load_all(".")
devtools::load_all(".")
install.packages("XML")
devtools::load_all(".")
devtools::load_all(".")
# use fragments
xb <- xml_builder()
# use fragments
xb <- xmlbuilder()
xb$start("study")
xb
xb$start("study")
xb$fragment(
person = .tags(
name = "John Doe",
age = 30
),
person = .tags(
name = "Jane Doe",
age = 25
)
)
as.list(NULL)
.tags
lapply(NULL, as.character)
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
devtools::load_all(".")
devtools::run_examples()
xb$start("study")
xb$fragment(
person = .tags(
name = "John Doe",
age = 30
),
person = .tags(
name = "Jane Doe",
age = 25
)
)
devtools::load_all(".")
xb$start("study")
xb$fragment(
person = .tags(
name = "John Doe",
age = 30
),
person = .tags(
name = "Jane Doe",
age = 25
)
)
devtools::load_all(".")
# use fragments
xb <- xmlbuilder()
xb$start("study")
xb$fragment(
person = .tags(
name = "John Doe",
age = 30
),
person = .tags(
name = "Jane Doe",
age = 25
)
)
xb$end("study")
xb
devtools::load_all(".")
devtools::run_examples()
xb
xb$start("fiets")
xb
devtools::load_all(".")
xb
xb <- xmlbuilder()
xb
xb$start("dfas")
xb
xb$start("dfas")
xb
xb$start("two")
xv
xvb
xb
devtools::load_all(".")
xb <- xmlbuilder()
xb$start("one")
xb$start("two")
xb
devtools::load_all(".")
xb <- xmlbuilder()
xb$start("one")
xb$start("two")
xb
devtools::load_all(".")
xb <- xmlbuilder()
xb$start("one")
xb$start("two")
xb
devtools::load_all(".")
xb <- xmlbuilder()
xb$start("one")
xb$start("two")
xb
xb <- xmlbuilder()
xb$start("one")
xb$start("two")
xb
library(xmlwriter)
b <- xmlbuilder(allow_fragments = FALSE)
b$comment("This is an xml comment")
b$start("homeless")
b$start("person", id = "1")
b$element("name", "John Doe")
b$element("age", 30)
b$start("address")
b$element("street", "123 Main St")
b$element("city", "Anytown")
b$element("state", "CA")
b$element("zip", 12345)
b$end("address")
b$end("person")
b$start("person", id = "2")
b$element("name", "Jane Doe")
b$element("age", 25)
b$start("address")
b$element("street", "321 Main St")
b$element("city", "Anytown")
b$element("state", "CA")
b$element("zip", 54321)
b$end("address")
b$end("person")
b$fragment(
person = .tags(
name = "Jim Doe",
age = 35
)
)
b$end("homeless")
# includes a xml prolog and comment
b
as.character(b)
# only contains the actual nodes
xml2::as_xml_document(b)
library(xmlwriter)
b <- xmlbuilder(allow_fragments = FALSE)
b$comment("This is an xml comment")
b$start("homeless")
b$start("person", id = "1")
b$element("name", "John Doe")
b$element("age", 30)
b$start("address")
b$element("street", "123 Main St")
b$element("city", "Anytown")
b$element("state", "CA")
b$element("zip", 12345)
b$end("address")
b$end("person")
b$start("person", id = "2")
b$element("name", "Jane Doe")
b$element("age", 25)
b$start("address")
b$element("street", "321 Main St")
b$element("city", "Anytown")
b$element("state", "CA")
b$element("zip", 54321)
b$end("address")
b$end("person")
b$fragment(
person = .tags(
.attr = c(id = "3"),
name = "Jim Doe",
age = 35
)
)
b$end("homeless")
# includes a xml prolog and comment
b
as.character(b)
# only contains the actual nodes
xml2::as_xml_document(b)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?utils
packageDescription("xmlwriter")
read.dcf("./DESCRIPTION")
devtools::load_all(".")
pkgload::dev_help('list_as_xml_string')
?xmlwriter
devtools::load_all(".")
x <- xml_fragment(a = "test")
x
as_list(x)
as.list(x)
as_list(x)
devtools::load_all(".")
read_fragment("<a>test</b>")
read_fragment("<a>test</a>")
read_fragment("<a>test</a>") |> str()
read_fragment("<a id='1'>test</a>") |> str()
