[{"path":"https://edwindj.github.io/xmlwriter/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Edwin de Jonge Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://edwindj.github.io/xmlwriter/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edwin de Jonge. Author, maintainer.","code":""},{"path":"https://edwindj.github.io/xmlwriter/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Jonge E (2024). xmlwriter: Fast Elegant XML Generation. R package version 0.1.0.9000, https://edwindj.github.io/xmlwriter/.","code":"@Manual{,   title = {xmlwriter: Fast and Elegant XML Generation},   author = {Edwin {de Jonge}},   year = {2024},   note = {R package version 0.1.0.9000},   url = {https://edwindj.github.io/xmlwriter/}, }"},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"xmlwriter","dir":"","previous_headings":"","what":"Fast and Elegant XML Generation","title":"Fast and Elegant XML Generation","text":"Fast elegant XML generation R NOTE api still flux, might change xmlwriter put CRAN xmlwriter R package provides simple interface creating XML documents fragments R. simple elegant syntax creating xml_fragments. Furthermore contains feed-forward API allows write xml order xml elements appear xml document fragment. xmlwriter’s XML generation R lists fast, implemented C++ using Rcpp. Curious benchmarks? Check performance section. xmlwriter can used companion R packages XML xml2 wonderful packages optimized parsing, querying manipulating XML documents. XML xml2 provide several ways creating XML documents, optimized generating writing XML. Creating XML documents XML xml2 can bit cumbersome, mostly forces author manipulate XML document tree, obscuring XML structure document, making hard read XML generated. xml2 provide way create XML documents R data structures using nested lists powerful feature, optimized speed readability. xmlwriter provides intuitive interface creating XML documents, mimics XML written text editor. two different ways create XML documents: light weight R syntax using xml_fragment, tag, frag data_frag, creating xml_fragment, can easily translated character xml2::xml_document object, used flexible building block generating larger XML document. xmlbuilder object allows create XML documents feed-forward manner, start end methods, giving control XML document structure, including XML comment, prolog etc.","code":""},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast and Elegant XML Generation","text":"xmlwriter yet available CRAN, feedback welcome submitting CRAN. can install development version xmlwriter GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"edwindj/xmlwriter\")"},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"using-xml_fragment-tag-frag-and-attr","dir":"","previous_headings":"Example","what":"Using xml_fragment, tag, frag and .attr:","title":"Fast and Elegant XML Generation","text":"xml_fragments allow write XML using readable R syntax. can used create character valid XML, xml2::xml_document building block complex XML documents. xml_fragment list object identical output xml2::as_list, can converted character xml2::xml_document object much faster (see performance). tag function creates simple xml_fragment element given tag name, text, attributes. frag function allows specifying nested elements attributes, thus creating complex xml_fragment. argument frag either: named element case name used tag name. element can value nested frag. unnamed element case element added text node. .attr argument used add attributes parent element. xml_fragment function restricted version frag allow .attr top level. data_frag function converts data.frame xml_fragment: can use within xml_fragment:","code":"library(xmlwriter)  # a tag is a simple xml_fragment, with text and named attributes tag(\"person\", \"John Doe\", id = 1, state=\"CA\") #> {xml_fragment} #> <person id=\"1\" state=\"CA\">John Doe<\/person> # a frag can contain multiple elements frag(   name = \"John Doe\",   age = 30 ) #> {xml_fragment (2)} #> [1]<name>John Doe<\/name> #> [2]<age>30<\/age> #> ...  # and can nest frags frag(   person = frag(     # attributes on person are specified using .attr     .attr = c(id = 1, state = \"CA\"),     name = \"John Doe\",     age = 30   ) ) #> {xml_fragment} #> <person id=\"1\" state=\"CA\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #> <\/person> # xml_fragment is more strict version of a frag fragment <- xml_fragment(   person = frag(     .attr = c(id = 1, state=\"CA\"),     name = \"John Doe\",     age = 30,     address = frag(       street = \"123 Main St\",       city = \"Anytown\",       state = \"CA\",       zip = 12345     )   ) ) cat(as.character(fragment)) <person id=\"1\" state=\"CA\">   <name>John Doe<\/name>   <age>30<\/age>   <address>     <street>123 Main St<\/street>     <city>Anytown<\/city>     <state>CA<\/state>     <zip>12345<\/zip>   <\/address> <\/person> data <- data.frame(   name = c(\"John Doe\", \"Jane Doe\"),   age = c(30, 25),   stringsAsFactors = FALSE )  # create an xml_fragment from a data.frame data_frag(data, row_tag = \"person\") #> {xml_fragment (2)} #> [1]<person> #>   <name>John Doe<\/name> #>   <age>30<\/age> #> <\/person> #> [2]<person> #>   <name>Jane Doe<\/name> #>   <age>25<\/age> #> <\/person> #> ... # but you can also use it within an xml_fragment # xml_doc is a xml_fragment that contains a single root element doc <- xml_doc(\"homeless\", year = \"1900\") /    frag(     data = data_frag(data, row_tag = \"person\")   )  doc <?xml version='1.0' encoding='UTF-8'?>  <homeless year=\"1900\">   <data>     <person>       <name>John Doe<\/name>       <age>30<\/age>     <\/person>     <person>       <name>Jane Doe<\/name>       <age>25<\/age>     <\/person>   <\/data> <\/homeless>"},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"combine-fragments-with--append-or-c","dir":"","previous_headings":"Example > Using xml_fragment, tag, frag and .attr:","what":"Combine fragments with +, append or c())","title":"Fast and Elegant XML Generation","text":"xml_fragments tag, frag data_frag can combined + operator, equivalent append() c() function: creates sibling XML nodes.","code":"library(xmlwriter) john <- tag(\"person\", \"John\", id = 1) jane <- tag(\"person\", \"Jane\", id = 2)  john + jane #> {xml_fragment (2)} #> [1]<person id=\"1\">John<\/person> #> [2]<person id=\"2\">Jane<\/person> #> ...  john + tag(\"person\", \"Jane\", id = 2) #> {xml_fragment (2)} #> [1]<person id=\"1\">John<\/person> #> [2]<person id=\"2\">Jane<\/person> #> ...  john + xml_fragment(   person = frag(     .attr = c(id = 2),     \"Jane\"   ) ) #> {xml_fragment (2)} #> [1]<person id=\"1\">John<\/person> #> [2]<person id=\"2\">Jane<\/person> #> ..."},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"add-child-fragments-with--or-add_child_fragment","dir":"","previous_headings":"Example > Using xml_fragment, tag, frag and .attr:","what":"Add child fragments with ‘/’ or add_child_fragment()","title":"Fast and Elegant XML Generation","text":"/ operator, equivalent add_child_fragment function creates child XML node last XML node xml_fragment.","code":"tag(\"person\", id = 1) / (   tag(\"name\", \"John Doe\")  ) #> {xml_fragment} #> <person id=\"1\"> #>   <name>John Doe<\/name> #> <\/person>  tag(\"person\", id = 1) / frag(   name = \"John Doe\",   age = 30 ) #> {xml_fragment} #> <person id=\"1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #> <\/person>  tag(\"person\", id = 1) |>    add_child_fragment(     name = \"John Doe\",     age = 30   ) #> {xml_fragment} #> <person id=\"1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #> <\/person>"},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"flexible-xml-creation","dir":"","previous_headings":"Example > Using xml_fragment, tag, frag and .attr:","what":"Flexible XML creation…","title":"Fast and Elegant XML Generation","text":"Using tag, frag, + / functions, one can create complex XML documents flexible manner.","code":"# needlessly complex, but shows flexible construction of XML fragment <-    tag(\"person\", id = \"1\") / # adds child nodes to person     ( frag(         name = \"John Doe\",         age = 30       ) +  # add an extra child node to person, with subnodes       tag(\"address\") / frag(           street = \"123 Main St\",           city = \"Anytown\",           state = \"CA\",           zip = 12345       )      )  fragment #> {xml_fragment} #> <person id=\"1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #>   <address> #>     <street>..."},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"xml2-compatibility","dir":"","previous_headings":"Example > Using xml_fragment, tag, frag and .attr:","what":"xml2 compatibility","title":"Fast and Elegant XML Generation","text":"xml_writer hard dependency xml2, output xml_writer can converted xml2::xml_document object. xml_fragment identical output xml2::as_list, can converted xml2::xml_document object. xml_fragment supports following xml2 methods: xml2::as_xml_document, calls xml2::read_xml method xml2::as_list, removes xml_fragment class xml2::write_xml, writes xml file console One can also use as_xml_nodeset function convert xml_fragment xml2::xml_nodeset object. xml_fragment implements xml2::write_xml method results :","code":"fragment |> xml2::as_xml_document() #> {xml_document} #> <person id=\"1\"> #> [1] <name>John Doe<\/name> #> [2] <age>30<\/age> #> [3] <address>\\n  <street>123 Main St<\/street>\\n  <city>Anytown<\/city>\\n  <sta ... fragment |> as_xml_nodeset() #> {xml_nodeset (1)} #> [1] <person id=\"1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n  ... xml2::write_xml(fragment, file=\"\") # print to the console <person id=\"1\">   <name>John Doe<\/name>   <age>30<\/age>   <address>     <street>123 Main St<\/street>     <city>Anytown<\/city>     <state>CA<\/state>     <zip>12345<\/zip>   <\/address> <\/person>"},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"using-an-xmlbuilder-object","dir":"","previous_headings":"Example","what":"Using an xmlbuilder object","title":"Fast and Elegant XML Generation","text":"xmlbuilder object allows create xml documents feed-forward manner. xml_fragment one creates xml document structure one (large) R list converts xml string xml2::xml_document, xmlbuilder one incremently builds xml document, without whole list structure memory. also provides functions output xml document, like adding prolog comment. provides following methods: start start new element end end current element element add element value comment add comment prolog add prolog fragment add fragment","code":"library(xmlwriter)  b <- xmlbuilder(allow_fragments = FALSE) b$comment(\"This is an xml comment\") b$start(\"homeless\")   b$start(\"person\", id = \"1\")     b$element(\"name\", \"John Doe\")     b$element(\"age\", 30)     b$start(\"address\")       b$element(\"street\", \"123 Main St\")       b$element(\"city\", \"Anytown\")       b$element(\"state\", \"CA\")       b$element(\"zip\", 12345)     b$end(\"address\")   b$end(\"person\")   b$start(\"person\", id = \"2\")     b$element(\"name\", \"Jane Doe\")     b$element(\"age\", 25)     b$start(\"address\")       b$element(\"street\", \"321 Main St\")       b$element(\"city\", \"Anytown\")       b$element(\"state\", \"CA\")       b$element(\"zip\", 54321)     b$end(\"address\")   b$end(\"person\")   b$fragment(     person = frag(       .attr = c(id = \"3\"),       name = \"Jim Doe\",       age = 35     )   ) b$end(\"homeless\")  # includes a xml prolog and comment b #> {xmlbuilder}  as.character(b) #> [1] \"<?xml version='1.0' encoding='UTF-8'?><!--This is an xml comment--><homeless><person id=\\\"1\\\"><name>John Doe<\/name><age>30<\/age><address><street>123 Main St<\/street><city>Anytown<\/city><state>CA<\/state><zip>12345<\/zip><\/address><\/person><person id=\\\"2\\\"><name>Jane Doe<\/name><age>25<\/age><address><street>321 Main St<\/street><city>Anytown<\/city><state>CA<\/state><zip>54321<\/zip><\/address><\/person><person id=\\\"3\\\">\\n  <name>Jim Doe<\/name>\\n  <age>35<\/age>\\n<\/person><\/homeless>\"  # only contains the actual nodes xml2::as_xml_document(b) #> {xml_document} #> <homeless> #> [1] <person id=\"1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n  ... #> [2] <person id=\"2\">\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n  <address>\\n  ... #> [3] <person id=\"3\">\\n  <name>Jim Doe<\/name>\\n  <age>35<\/age>\\n<\/person>"},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Fast and Elegant XML Generation","text":"xmlwriter optimized generating xml documents fragments R list structure identical xml2::as_list output.","code":"library(microbenchmark)  library(xml2) library(xmlwriter)  # read in a sample 600k xml file as a R list str doc <- xml2::read_xml(\"./example/DataGeneric.xml\") doc_list <- xml2::as_list(doc)  # just copy the list and set an extra attribute class=\"xml_fragment\" # making it a xml_fragment object doc_fragment <- structure(doc_list, class = \"xml_fragment\")  # see how long it takes to create an xml document with xml2 and xmlwriter  microbenchmark(   xml2      = xml2::as_xml_document(doc_list),   xmlwriter = xml2::as_xml_document(doc_fragment),   times     = 10 ) #> Warning in microbenchmark(xml2 = xml2::as_xml_document(doc_list), xmlwriter = #> xml2::as_xml_document(doc_fragment), : less accurate nanosecond times to avoid #> potential integer overflows #> Unit: milliseconds #>       expr        min         lq       mean     median         uq        max #>       xml2 2404.73241 2433.30584 2452.43190 2453.09458 2460.53107 2517.83755 #>  xmlwriter   41.27236   41.36388   42.91722   42.04296   44.40751   46.32922 #>  neval #>     10 #>     10"},{"path":"https://edwindj.github.io/xmlwriter/reference/add_child_fragment.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a child fragment to an existing xml_fragment — add_child_fragment","title":"Add a child fragment to an existing xml_fragment — add_child_fragment","text":"Add child fragment existing xml_fragment. child fragment can named frag element case name used tag name, unnamed element case element added text node. functionality equivalent / operator.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/add_child_fragment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a child fragment to an existing xml_fragment — add_child_fragment","text":"","code":"add_child_fragment(x, ..., .frag = frag(...))"},{"path":"https://edwindj.github.io/xmlwriter/reference/add_child_fragment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a child fragment to an existing xml_fragment — add_child_fragment","text":"x xml_fragment() object ... nest named elements characters include fragment (see example) .frag xml_fragment add child, overrides ... argument","code":""},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/reference/as.character.xml_fragment.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn an xml_fragment into a character — as.character.xml_fragment","title":"Turn an xml_fragment into a character — as.character.xml_fragment","text":"function turns xml_fragment character string, using performant c++ implementation.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/as.character.xml_fragment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn an xml_fragment into a character — as.character.xml_fragment","text":"","code":"# S3 method for class 'xml_fragment' as.character(x, ...)  # S3 method for class 'xml_doc' as.character(x, use_prolog = TRUE, ...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/as.character.xml_fragment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn an xml_fragment into a character — as.character.xml_fragment","text":"x object coerced tested. ... arguments passed methods. use_prolog TRUE xml prolog included. suppress prolog string either remove set use_prolog = FALSE.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/as_xml_nodeset.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms an xml_fragment into an xml_nodeset — as_xml_nodeset","title":"Transforms an xml_fragment into an xml_nodeset — as_xml_nodeset","text":"Using xml2 package, function transforms xml_fragment xml_nodeset","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/as_xml_nodeset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms an xml_fragment into an xml_nodeset — as_xml_nodeset","text":"","code":"as_xml_nodeset(x, ...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/as_xml_nodeset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms an xml_fragment into an xml_nodeset — as_xml_nodeset","text":"x object created xml_fragment() ... reserved future use","code":""},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/reference/data_frag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an xml_fragment from a data.frame — data_frag","title":"Create an xml_fragment from a data.frame — data_frag","text":"Create xml_fragment() data.frame, row set xml elements (columns).","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/data_frag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an xml_fragment from a data.frame — data_frag","text":"","code":"data_frag(df, row_tags = \"row\", .attr = NULL)"},{"path":"https://edwindj.github.io/xmlwriter/reference/data_frag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an xml_fragment from a data.frame — data_frag","text":"df data frame stored set xml elements row_tags character tag name used row. Note can single value vector length equal number rows data.frame. .attr optional data.frame xml row attributes","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/data_frag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an xml_fragment from a data.frame — data_frag","text":"xml_fragment() object","code":""},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/reference/data_frag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an xml_fragment from a data.frame — data_frag","text":"","code":"persons <- data.frame(   name = c(\"John Doe\", \"Jane Doe\"),   age = c(30, 25),   stringsAsFactors = FALSE )  df <- data_frag(persons, row_tag = \"person\") print(df) #> {xml_fragment (2)} #> [1]<person> #>   <name>John Doe<\/name> #>   <age>30<\/age> #> <\/person> #> [2]<person> #>   <name>Jane Doe<\/name> #>   <age>25<\/age> #> <\/person> #> ...  # setting ids on rows persons <- data.frame(   name = c(\"John Doe\", \"Jane Doe\"),   age = c(30, 25),   id = c(\"p1\", \"p2\"),   stringsAsFactors = FALSE )  df <- data_frag(   persons[1:2],   row_tag = \"person\",   .attr = persons[3] )  print(df) #> {xml_fragment (2)} #> [1]<person id=\"p1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #> <\/person> #> [2]<person id=\"p2\"> #>   <name>Jane Doe<\/name> #>   <age>25<\/age> #> <\/person> #> ...  # turning it into a document doc <- xml_doc(\"study\", id = \"1\") / frag(   source = \"homeless db\",   data = df )  cat(as.character(doc)) #> <?xml version='1.0' encoding='UTF-8'?> #>  <study id=\"1\"> #>   <source>homeless db<\/source> #>   <data> #>     <person id=\"p1\"> #>       <name>John Doe<\/name> #>       <age>30<\/age> #>     <\/person> #>     <person id=\"p2\"> #>       <name>Jane Doe<\/name> #>       <age>25<\/age> #>     <\/person> #>   <\/data> #> <\/study>"},{"path":"https://edwindj.github.io/xmlwriter/reference/elem.html","id":null,"dir":"Reference","previous_headings":"","what":"add an element to an xmlbuilder object — elem","title":"add an element to an xmlbuilder object — elem","text":"add element xmlbuilder object","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/elem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add an element to an xmlbuilder object — elem","text":"","code":"elem(tag, text = NULL, ...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/elem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add an element to an xmlbuilder object — elem","text":"tag name element text text contents element ... additional xml. attributes set","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/elem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add an element to an xmlbuilder object — elem","text":"xmlbuilder object","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/elem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add an element to an xmlbuilder object — elem","text":"","code":"xb <- elem(\"homeless\") /   elem(\"person\") / (      elem(\"name\",\"John Doe\") +      elem(\"age\",35)   ) +   elem(\"person\") /(     elem(\"name\",\"Jane Doe\") +     elem(\"age\", 30)   ) +   elem(\"person\") / (     elem(\"name\",\"Jim Doe\") +     elem(\"age\", 25) +     elem(\"address\") / (       elem(\"street\", \"123 Main St\") +       elem(\"city\", \"Anytown\") +       elem(\"state\", \"CA\") +       elem(\"zip\", 12345)     )   )  print(xb) #> {xmlbuilder} #> <homeless><person><name>John Doe<\/name><age>35<\/age><person><name>Jane Doe<\/name><age>30<\/age><person><name>Jim Doe<\/name><age>25<\/age><address><street>123 Main St<\/street><city>Anytown<\/city><state>CA<\/state><zip>12345 xb$end() xb$end()   doc <- xb |> xml2::as_xml_document() doc |> as.character() |> cat() #> <?xml version=\"1.0\" encoding=\"UTF-8\"?> #> <homeless> #>   <person> #>     <name>John Doe<\/name> #>     <age>35<\/age> #>     <person> #>       <name>Jane Doe<\/name> #>       <age>30<\/age> #>       <person> #>         <name>Jim Doe<\/name> #>         <age>25<\/age> #>         <address> #>           <street>123 Main St<\/street> #>           <city>Anytown<\/city> #>           <state>CA<\/state> #>           <zip>12345<\/zip> #>         <\/address> #>       <\/person> #>     <\/person> #>   <\/person> #> <\/homeless>"},{"path":"https://edwindj.github.io/xmlwriter/reference/frag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a frag xml_fragment — frag","title":"Create a frag xml_fragment — frag","text":"Create frag xml_fragment, allows multiple elements nested frags.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/frag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a frag xml_fragment — frag","text":"","code":"frag(..., .attr = NULL)"},{"path":"https://edwindj.github.io/xmlwriter/reference/frag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a frag xml_fragment — frag","text":"... nest named elements characters include fragment (see example) .attr list attributes add parent fragment","code":""},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/reference/frag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a frag xml_fragment — frag","text":"","code":"doc <- xml_fragment(   study = frag(     .attr = c(id=\"1\"),     person = frag(       .attr = c(id = \"p1\"),       name = \"John Doe\",       age = 30     ),     person = frag(       name = \"Jane Doe\",       age = 25,       address = frag(street = \"123 Main St\", city = \"Springfield\"),       \"This is a text node\"     )   ) )  print(doc) #> {xml_fragment} #> <study id=\"1\"> #>   <person id=\"p1\"> #>     <name>John Doe<\/name> #>     <age>30<\/age> #>   ...  if (require(\"xml2\")){   as_xml_document(doc) } #> Loading required package: xml2 #> {xml_document} #> <study id=\"1\"> #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n<\/person> #> [2] <person><name>Jane Doe<\/name><age>25<\/age><address><street>123 Main St<\/s ...  # you can create a function to generate an xml fragment: person_frag <- function(name, age, id){   tag(\"person\", id = id) / frag(     name = name,     age  = age,     address = frag(       street = \"123 Main St\",       city = \"Springfield\"     )   ) }  # xml_doc is a xml_fragment with the restriction of having one root element doc2 <- xml_doc(\"study\") / (   person_frag(\"John Doe\", 30, \"p1\") +   person_frag(\"Jane Doe\", 25, \"p2\") )  print(doc2) #> {xml_doc,xml_fragment} #> <?xml version='1.0' encoding='UTF-8'?> #>  <study> #>   <person id=\"p1\"> #>     <name>Joh...   if (require(\"xml2\")){   as_xml_document(doc2) } #> {xml_document} #> <study> #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n ... #> [2] <person id=\"p2\">\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n  <address>\\n ...  # a fragment can have multiple root elements fgmt <- person_frag(\"John Doe\", 30, id = \"p1\") +   person_frag(\"Jane Doe\", 25, id = \"p2\")   print(fgmt) #> {xml_fragment (2)} #> [1]<person id=\"p1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #>   <address> #>     <street... #> [2]<person id=\"p2\"> #>   <name>Jane Doe<\/name> #>   <age>25<\/age> #>   <address> #>     <street... #> ...  if (require(\"xml2\")){   # as_xml_document won't work because it expects a single root element,   # so we retrieve a nodeset instead   as_xml_nodeset(fgmt) } #> {xml_nodeset (2)} #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n ... #> [2] <person id=\"p2\">\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n  <address>\\n ...  iris_xml <- xml_doc(\"fieldstudy\", id = \"iris\", doi =\"10.1111/j.1469-1809.1936.tb02137.x\") /   frag(     source = \"Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.\",     data = data_frag(iris, row_tag = \"obs\")   )  print(iris_xml, max_characters = 300) #> {xml_doc,xml_fragment} #> <?xml version='1.0' encoding='UTF-8'?> #>  <fieldstudy id=\"iris\" doi=\"10.1111/j.1469-1809.1936.tb02137.x\"> #>   <source>Fisher, R. A. (1936) The use of multiple measurements in #> taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.<\/source> #>   <data> #>     <obs> #>       <Sepal.Length>5.1<\/Sepal.Length> #>  ...   if (require(\"xml2\")){   as_xml_document(iris_xml) } #> {xml_document} #> <fieldstudy id=\"iris\" doi=\"10.1111/j.1469-1809.1936.tb02137.x\"> #> [1] <source>Fisher, R. A. (1936) The use of multiple measurements in\\ntaxonom ... #> [2] <data>\\n  <obs>\\n    <Sepal.Length>5.1<\/Sepal.Length>\\n    <Sepal.Width>3 ..."},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list to an xml_document — list_as_xml_document","title":"Convert a list to an xml_document — list_as_xml_document","text":"list_as_xml_document fast efficient way convert list xml2::xml_document. preferred interface use xml_fragment() xml_doc() create xml fragments.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list to an xml_document — list_as_xml_document","text":"","code":"list_as_xml_document(x, ...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list to an xml_document — list_as_xml_document","text":"x list returned xml2::as_list() ... reserved future use","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list to an xml_document — list_as_xml_document","text":"xml2::xml_document","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a list to an xml_document — list_as_xml_document","text":"list_to_xml_document much faster implementation xml2::as_xml_document.list() method. writes xml directly string buffer reads back xml2::xml_document. function can used tandem xml2::as_list() convert R data structures.","code":""},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a list to an xml_document — list_as_xml_document","text":"","code":"data <-   list(     study = list(       person = list(         name = \"John Doe\",         age = \"30\"       ),       person = list(         name = \"Jane Doe\",         age = \"25\"       )     )   )  list_as_xml_string(data) #> [1] \"<study>\\n  <person>\\n    <name>John Doe<\/name>\\n    <age>30<\/age>\\n  <\/person>\\n  <person>\\n    <name>Jane Doe<\/name>\\n    <age>25<\/age>\\n  <\/person>\\n<\/study>\" if (require(\"xml2\")){   list_as_xml_document(data) } #> {xml_document} #> <study> #> [1] <person>\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n<\/person> #> [2] <person>\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n<\/person>  #note the xml_fragment function is more powerful to create lists  data <- xml_doc(\"study\", id = \"1\") /   frag(     person = frag(       name = \"John Doe\",       age = \"30\"     ),     person = frag(       name = \"Jane Doe\",       age = \"25\"     ),     \"This is a text node\" )  list_as_xml_string(data) #> [1] \"<study id=\\\"1\\\">\\n  <person>\\n    <name>John Doe<\/name>\\n    <age>30<\/age>\\n  <\/person>\\n  <person>\\n    <name>Jane Doe<\/name>\\n    <age>25<\/age>\\n  <\/person>This is a text node\\n<\/study>\""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list to an xml string — list_as_xml_string","title":"Convert a list to an xml string — list_as_xml_string","text":"list_to_xml_string fast efficient way convert specific list xml string. preferred interface use xml_fragment() xml_doc() create xml fragments.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list to an xml string — list_as_xml_string","text":"","code":"list_as_xml_string(x, ...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list to an xml string — list_as_xml_string","text":"x list returned xml2::as_list() ... reserved future use","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_string.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a list to an xml string — list_as_xml_string","text":"function working horse turning xml_fragment(), xml_doc() list object character xml strings xml2::xml_document objects. input list format identical format returned xml2::as_list() function, much faster generating xml string . writes xml directly string buffer. function allows easy conversion R data structures xml format creating list structures R converting xml. function can used tandem xml2::as_list() convert R data structures.","code":""},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a list to an xml string — list_as_xml_string","text":"","code":"data <-   list(     study = list(       person = list(         name = \"John Doe\",         age = \"30\"       ),       person = list(         name = \"Jane Doe\",         age = \"25\"       )     )   )  list_as_xml_string(data) #> [1] \"<study>\\n  <person>\\n    <name>John Doe<\/name>\\n    <age>30<\/age>\\n  <\/person>\\n  <person>\\n    <name>Jane Doe<\/name>\\n    <age>25<\/age>\\n  <\/person>\\n<\/study>\" if (require(\"xml2\")){   list_as_xml_document(data) } #> {xml_document} #> <study> #> [1] <person>\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n<\/person> #> [2] <person>\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n<\/person>  #note the xml_fragment function is more powerful to create lists  data <- xml_doc(\"study\", id = \"1\") /   frag(     person = frag(       name = \"John Doe\",       age = \"30\"     ),     person = frag(       name = \"Jane Doe\",       age = \"25\"     ),     \"This is a text node\" )  list_as_xml_string(data) #> [1] \"<study id=\\\"1\\\">\\n  <person>\\n    <name>John Doe<\/name>\\n    <age>30<\/age>\\n  <\/person>\\n  <person>\\n    <name>Jane Doe<\/name>\\n    <age>25<\/age>\\n  <\/person>This is a text node\\n<\/study>\""},{"path":"https://edwindj.github.io/xmlwriter/reference/read_fragment.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an XML fragment from a string — read_fragment","title":"Read an XML fragment from a string — read_fragment","text":"Reads xml fragment string, connection raw vector using xml2::read_xml(), turns xml_fragment().","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/read_fragment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an XML fragment from a string — read_fragment","text":"","code":"read_fragment(x, ...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/read_fragment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an XML fragment from a string — read_fragment","text":"x string, connection raw vector ... passed xml2::read_xml()","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/read_fragment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an XML fragment from a string — read_fragment","text":"object class xml_fragment","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tag fragment — tag","title":"Create a tag fragment — tag","text":"Create tag fragment optional text attributes","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tag fragment — tag","text":"","code":"tag(tag, text = NULL, ..., .attr = list(...))"},{"path":"https://edwindj.github.io/xmlwriter/reference/tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tag fragment — tag","text":"tag character, name tag text character, text include tag ... additional attributes add tag .attr list additional attributes add tag, overrides ... argument","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tag fragment — tag","text":"xml_fragment new tag added","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/tag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tag fragment — tag","text":"","code":"tag(\"greeting\", \"hi\", id = \"hi\") #> {xml_fragment} #> <greeting id=\"hi\">hi<\/greeting>   tag(\"person\", id = \"1\") / (tag(\"name\", \"John Doe\") + tag(\"age\", 35)) #> {xml_fragment} #> <person id=\"1\"> #>   <name>John Doe<\/name> #>   <age>35<\/age> #> <\/person>   xml_fragment(person = frag(   .attr = c(id = 1),   name = \"John Doe\",   age = 30 ))   / tag(\"address\", \"Unknown\") #> {xml_fragment} #> <person id=\"1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #>   <address>Unknown<\/addr...    a <- tag(\"person\", id = 1) /   xml_fragment(     name =\"John Doe\",     age = 30,     address = frag(       street = \"123 Main St\",       city = \"Springfield\"     )   )  cat(as.character(a)) #> <person id=\"1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #>   <address> #>     <street>123 Main St<\/street> #>     <city>Springfield<\/city> #>   <\/address> #> <\/person>"},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_doc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an xml_fragment with a root element, (kind of tag) — xml_doc","title":"Create an xml_fragment with a root element, (kind of tag) — xml_doc","text":"Create xml_fragment root element, (kind tag)","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_doc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an xml_fragment with a root element, (kind of tag) — xml_doc","text":"","code":"xml_doc(root, ..., .attr = list(...))"},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_doc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an xml_fragment with a root element, (kind of tag) — xml_doc","text":"root name root element ... additional attributes add tag .attr list additional attributes add tag, overrides ... argument","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_doc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an xml_fragment with a root element, (kind of tag) — xml_doc","text":"xml_fragment root element","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_doc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an xml_fragment with a root element, (kind of tag) — xml_doc","text":"","code":"tag(\"greeting\", \"hi\", id = \"hi\") #> {xml_fragment} #> <greeting id=\"hi\">hi<\/greeting>   tag(\"person\", id = \"1\") / (tag(\"name\", \"John Doe\") + tag(\"age\", 35)) #> {xml_fragment} #> <person id=\"1\"> #>   <name>John Doe<\/name> #>   <age>35<\/age> #> <\/person>   xml_fragment(person = frag(   .attr = c(id = 1),   name = \"John Doe\",   age = 30 ))   / tag(\"address\", \"Unknown\") #> {xml_fragment} #> <person id=\"1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #>   <address>Unknown<\/addr...    a <- tag(\"person\", id = 1) /   xml_fragment(     name =\"John Doe\",     age = 30,     address = frag(       street = \"123 Main St\",       city = \"Springfield\"     )   )  cat(as.character(a)) #> <person id=\"1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #>   <address> #>     <street>123 Main St<\/street> #>     <city>Springfield<\/city> #>   <\/address> #> <\/person>"},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an XML fragment — xml_fragment","title":"Create an XML fragment — xml_fragment","text":"Create XML fragment using readable R syntax, can used create string, xml2::xml_document building block complex XML documents.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an XML fragment — xml_fragment","text":"","code":"xml_fragment(...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an XML fragment — xml_fragment","text":"... nest named elements characters include fragment (see example)","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an XML fragment — xml_fragment","text":"xml_fragment, list object can converted xml2::xml_document character string","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an XML fragment — xml_fragment","text":"xml_fragment built using: named frag elements, name tag name, value contents tag, e.g. name = \"value\" becomes <name>value<\/name>. value can nested frag object, character string numeric value. .attr attributes, set current element, frag specified unnamed elements, added text nodes. data_frag() function can used convert data.frame xml fragment, row set xml elements (columns). tag() function can used create tag attributes (optional) text. xml_doc special case xml_fragment contains exactly one root element, errors case. resulting xml_fragment object can converted xml2::xml_document xml2::as_xml_document() character string .character(). methods fast using performant c++ implementation.","code":""},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an XML fragment — xml_fragment","text":"","code":"doc <- xml_fragment(   study = frag(     .attr = c(id=\"1\"),     person = frag(       .attr = c(id = \"p1\"),       name = \"John Doe\",       age = 30     ),     person = frag(       name = \"Jane Doe\",       age = 25,       address = frag(street = \"123 Main St\", city = \"Springfield\"),       \"This is a text node\"     )   ) )  print(doc) #> {xml_fragment} #> <study id=\"1\"> #>   <person id=\"p1\"> #>     <name>John Doe<\/name> #>     <age>30<\/age> #>   ...  if (require(\"xml2\")){   as_xml_document(doc) } #> {xml_document} #> <study id=\"1\"> #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n<\/person> #> [2] <person><name>Jane Doe<\/name><age>25<\/age><address><street>123 Main St<\/s ...  # you can create a function to generate an xml fragment: person_frag <- function(name, age, id){   tag(\"person\", id = id) / frag(     name = name,     age  = age,     address = frag(       street = \"123 Main St\",       city = \"Springfield\"     )   ) }  # xml_doc is a xml_fragment with the restriction of having one root element doc2 <- xml_doc(\"study\") / (   person_frag(\"John Doe\", 30, \"p1\") +   person_frag(\"Jane Doe\", 25, \"p2\") )  print(doc2) #> {xml_doc,xml_fragment} #> <?xml version='1.0' encoding='UTF-8'?> #>  <study> #>   <person id=\"p1\"> #>     <name>Joh...   if (require(\"xml2\")){   as_xml_document(doc2) } #> {xml_document} #> <study> #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n ... #> [2] <person id=\"p2\">\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n  <address>\\n ...  # a fragment can have multiple root elements fgmt <- person_frag(\"John Doe\", 30, id = \"p1\") +   person_frag(\"Jane Doe\", 25, id = \"p2\")   print(fgmt) #> {xml_fragment (2)} #> [1]<person id=\"p1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #>   <address> #>     <street... #> [2]<person id=\"p2\"> #>   <name>Jane Doe<\/name> #>   <age>25<\/age> #>   <address> #>     <street... #> ...  if (require(\"xml2\")){   # as_xml_document won't work because it expects a single root element,   # so we retrieve a nodeset instead   as_xml_nodeset(fgmt) } #> {xml_nodeset (2)} #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n ... #> [2] <person id=\"p2\">\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n  <address>\\n ...  iris_xml <- xml_doc(\"fieldstudy\", id = \"iris\", doi =\"10.1111/j.1469-1809.1936.tb02137.x\") /   frag(     source = \"Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.\",     data = data_frag(iris, row_tag = \"obs\")   )  print(iris_xml, max_characters = 300) #> {xml_doc,xml_fragment} #> <?xml version='1.0' encoding='UTF-8'?> #>  <fieldstudy id=\"iris\" doi=\"10.1111/j.1469-1809.1936.tb02137.x\"> #>   <source>Fisher, R. A. (1936) The use of multiple measurements in #> taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.<\/source> #>   <data> #>     <obs> #>       <Sepal.Length>5.1<\/Sepal.Length> #>  ...   if (require(\"xml2\")){   as_xml_document(iris_xml) } #> {xml_document} #> <fieldstudy id=\"iris\" doi=\"10.1111/j.1469-1809.1936.tb02137.x\"> #> [1] <source>Fisher, R. A. (1936) The use of multiple measurements in\\ntaxonom ... #> [2] <data>\\n  <obs>\\n    <Sepal.Length>5.1<\/Sepal.Length>\\n    <Sepal.Width>3 ..."},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a fast feed-forward XML builder — xmlbuilder","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"function creates XML builder allows create XML documents feed-forward manner. xmlbuilder returns object methods create XML elements, text nodes, comments, .","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"","code":"xmlbuilder(   allow_fragments = TRUE,   use_prolog = !allow_fragments,   strict = FALSE )"},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"allow_fragments logical. warning issued XML document multiple root elements? Set FALSE suppress creating multiple xml fragments. use_prolog logical. XML prolog included output? Default TRUE, generate UTF-8 xml prolog. Set FALSE want generate xml fragment manually prepend prolog. strict logical. builder check dangling nodes, default FALSE.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"object class `xmlbuilder","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"$start(tag, ...) ($start_element) starts element given tag attributes. $end() ($end_element) ends current element. $element(tag, text, ...) creates element given tag, text, attributes. $text(text) creates text node. $fragment(..., .attr) writes xml fragment . $comment(comment) creates comment node. $to_xml_string() returns XML document fragments(s) character vector.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"","code":"b <-xmlbuilder()  b$start(\"root\")   b$element(\"child1\", \"text1\", attr1 = \"value1\")   b$element(\"child2\", \"text2\", attr2 = \"value2\")   b$start(\"child3\", attr3 = \"value3\")     b$text(\"text3\")     b$element(\"child4\", \"text3\", attr4 = \"value4\")   b$end(\"child3\") b$end(\"root\")  print(b) #> {xmlbuilder}  if (require(\"xml2\")) {   # a builder can be converted to an xml_document using   doc <- as_xml_document(b)    # or equivalentlty   doc <-     b$to_xml_string() |>     read_xml() }  # build some xml fragments fms <- xmlbuilder(allow_fragments = TRUE)  fms$start(\"person\", id = \"1\")   fms$element(\"name\", \"John Doe\")   fms$element(\"age\", 30) fms$end(\"person\")  fms$start(\"person\", id = \"2\")   fms$element(\"name\", \"Jane Doe\")   fms$element(\"age\", 25) fms$end(\"person\")  fms$start(\"person\", id = \"3\")   fms$element(\"name\", \"Jim Doe\")   fms$element(\"age\", 35) fms$end(\"person\")  s <- fms$to_xml_string() as.character(fms) #> [1] \"<person id=\\\"1\\\"><name>John Doe<\/name><age>30<\/age><\/person>\" #> [2] \"<person id=\\\"2\\\"><name>Jane Doe<\/name><age>25<\/age><\/person>\" #> [3] \"<person id=\\\"3\\\"><name>Jim Doe<\/name><age>35<\/age><\/person>\"  length(s) # three fragments #> [1] 3  # print xml string of the second fragment print(s[2]) #> [1] \"<person id=\\\"2\\\"><name>Jane Doe<\/name><age>25<\/age><\/person>\"  if (require(\"xml2\")){   # convert to xml_nodes   nodes <- fms$to_xml_node_list()   length(nodes) # three nodes   # show the second xml_node   print(nodes[[2]]) } #> {xml_document} #> <person id=\"2\"> #> [1] <name>Jane Doe<\/name> #> [2] <age>25<\/age>  # use fragments xb <- xmlbuilder()  xb$start(\"study\") xb$fragment(   person = frag(     name = \"John Doe\",     age = 30   ),   person = frag(     name = \"Jane Doe\",     age = 25   ) ) xb$end(\"study\") xb #> {xmlbuilder}"},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlwriter-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast and elegant XML generation — xmlwriter-package","title":"Fast and elegant XML generation — xmlwriter-package","text":"xmlwriter R package provides simple interface creating XML documents fragments R. provides simple elegant syntax creating xml_fragments furthermore contains feed-forward API allows write xml.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlwriter-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast and elegant XML generation — xmlwriter-package","text":"xmlwriter's xml generation R lists fast, implemented C++ using Rcpp. xmlwriter provides two different ways create xml documents: light weight R syntax using xml_doc(), xml_fragment() frag(), creating xml fragment can easily translated xml string xml2::xml_document object feed-forward API using xmlbuilder() allows create xml documents feed-forward manner. implements several xml2 methods: as_xml_document.xml_fragment() as_list.xml_fragment() write_xml.xml_fragment()","code":""},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlwriter-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast and elegant XML generation — xmlwriter-package","text":"Maintainer: Edwin de Jonge edwindjonge@gmail.com (ORCID)","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlwriter-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast and elegant XML generation — xmlwriter-package","text":"","code":"doc <- xml_fragment(   study = frag(     .attr = c(id=\"1\"),     person = frag(       .attr = c(id = \"p1\"),       name = \"John Doe\",       age = 30     ),     person = frag(       name = \"Jane Doe\",       age = 25,       address = frag(street = \"123 Main St\", city = \"Springfield\"),       \"This is a text node\"     )   ) )  print(doc) #> {xml_fragment} #> <study id=\"1\"> #>   <person id=\"p1\"> #>     <name>John Doe<\/name> #>     <age>30<\/age> #>   ...  if (require(\"xml2\")){   as_xml_document(doc) } #> {xml_document} #> <study id=\"1\"> #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n<\/person> #> [2] <person><name>Jane Doe<\/name><age>25<\/age><address><street>123 Main St<\/s ...  # you can create a function to generate an xml fragment: person_frag <- function(name, age, id){   tag(\"person\", id = id) / frag(     name = name,     age  = age,     address = frag(       street = \"123 Main St\",       city = \"Springfield\"     )   ) }  # xml_doc is a xml_fragment with the restriction of having one root element doc2 <- xml_doc(\"study\") / (   person_frag(\"John Doe\", 30, \"p1\") +   person_frag(\"Jane Doe\", 25, \"p2\") )  print(doc2) #> {xml_doc,xml_fragment} #> <?xml version='1.0' encoding='UTF-8'?> #>  <study> #>   <person id=\"p1\"> #>     <name>Joh...   if (require(\"xml2\")){   as_xml_document(doc2) } #> {xml_document} #> <study> #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n ... #> [2] <person id=\"p2\">\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n  <address>\\n ...  # a fragment can have multiple root elements fgmt <- person_frag(\"John Doe\", 30, id = \"p1\") +   person_frag(\"Jane Doe\", 25, id = \"p2\")   print(fgmt) #> {xml_fragment (2)} #> [1]<person id=\"p1\"> #>   <name>John Doe<\/name> #>   <age>30<\/age> #>   <address> #>     <street... #> [2]<person id=\"p2\"> #>   <name>Jane Doe<\/name> #>   <age>25<\/age> #>   <address> #>     <street... #> ...  if (require(\"xml2\")){   # as_xml_document won't work because it expects a single root element,   # so we retrieve a nodeset instead   as_xml_nodeset(fgmt) } #> {xml_nodeset (2)} #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n ... #> [2] <person id=\"p2\">\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n  <address>\\n ...  iris_xml <- xml_doc(\"fieldstudy\", id = \"iris\", doi =\"10.1111/j.1469-1809.1936.tb02137.x\") /   frag(     source = \"Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.\",     data = data_frag(iris, row_tag = \"obs\")   )  print(iris_xml, max_characters = 300) #> {xml_doc,xml_fragment} #> <?xml version='1.0' encoding='UTF-8'?> #>  <fieldstudy id=\"iris\" doi=\"10.1111/j.1469-1809.1936.tb02137.x\"> #>   <source>Fisher, R. A. (1936) The use of multiple measurements in #> taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.<\/source> #>   <data> #>     <obs> #>       <Sepal.Length>5.1<\/Sepal.Length> #>  ...   if (require(\"xml2\")){   as_xml_document(iris_xml) } #> {xml_document} #> <fieldstudy id=\"iris\" doi=\"10.1111/j.1469-1809.1936.tb02137.x\"> #> [1] <source>Fisher, R. A. (1936) The use of multiple measurements in\\ntaxonom ... #> [2] <data>\\n  <obs>\\n    <Sepal.Length>5.1<\/Sepal.Length>\\n    <Sepal.Width>3 ..."}]
