[{"path":"https://edwindj.github.io/xmlwriter/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Edwin de Jonge Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://edwindj.github.io/xmlwriter/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edwin de Jonge. Author, maintainer.","code":""},{"path":"https://edwindj.github.io/xmlwriter/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Jonge E (2024). xmlwriter: Fast Elegant XML Generation. R package version 0.1.0.9000, https://edwindj.github.io/xmlwriter/.","code":"@Manual{,   title = {xmlwriter: Fast and Elegant XML Generation},   author = {Edwin {de Jonge}},   year = {2024},   note = {R package version 0.1.0.9000},   url = {https://edwindj.github.io/xmlwriter/}, }"},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"xmlwriter","dir":"","previous_headings":"","what":"Fast and Elegant XML Generation","title":"Fast and Elegant XML Generation","text":"xmlwriter R package provides simple interface creating XML documents fragments R. provides simple elegant syntax creating xml_fragments furthermore contains feed-forward API allows write xml order xml elements appear xml document fragment. xmlwriter’s xml generation R lists fast, implemented C++ using Rcpp. Curious benchmarks? Check performance section. xmlwriter can used companion R packages XML xml2 wonderful packages optimized parsing, querying manipulating XML documents. XML xml2 provide several ways creating xml documents, optimized generating writing xml. Creating xml documents XML xml2 can bit cumbersome, mostly forces author manipulate xml document tree adding nodes attributes. xml2 provide way create xml documents R data structures using nested lists powerful feature, optimized speed readability. xmlwriter provides intuitive interface creating xml documents, mimicks xml written text editor. two different ways create xml documents: light weight R syntax using xml_fragment .tags, creating xml_fragment, can easily translated xml string xml2::xml_document object, used flexible building block generating larger xml document. xmlbuilder object allows create xml documents feed-forward manner, start end methods, giving control xml document structure, including xml comment, prolog etc.","code":""},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast and Elegant XML Generation","text":"xmlwriter yet available CRAN, feedback welcome submitting CRAN. can install development version xmlwriter GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"edwindj/xmlwriter\")"},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"using-xml_fragment-tags-and-attr","dir":"","previous_headings":"Example","what":"Using xml_fragment, .tags and .attr:","title":"Fast and Elegant XML Generation","text":"xml_fragment function creates xml fragment using readable R syntax. can used create character valid xml, xml2::xml_document building block complex XML documents. argument xml_fragment either: named .tags element case name used tag name. unnamed element case element added text node. .attr argument used add attributes root element. .tags structure xml_fragment, can nest create complex xml document. output xml_fragment list object identical output xml2::as_list, can converted xml2::xml_document character string, much faster. xml_fragment also provides .data function can used convert data.frame xml: xml_doc well xml_fragment can used create single root element xml document. xml_doc xml_fragment errors one root element.","code":"library(xmlwriter)  fragment <- xml_fragment(   persoon = .tags(     .attr = c(id = \"1\"),     name = \"John Doe\",     age = 30,     address = .tags(        street = \"123 Main St\",        city = \"Anytown\",        state = \"CA\",        zip = 12345     )   ) )  print(fragment) #> {xml_fragment} #> <persoon id=\"1\"><name>John Doe<\/name><age>30<\/age><address><street>123 Main St<\/... fragment |> xml2::as_xml_document() #> {xml_document} #> <persoon id=\"1\"> #> [1] <name>John Doe<\/name> #> [2] <age>30<\/age> #> [3] <address>\\n  <street>123 Main St<\/street>\\n  <city>Anytown<\/city>\\n  <sta ... fragment |> as_xml_nodeset() #> {xml_nodeset (1)} #> [1] <persoon id=\"1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n ... data <- data.frame(   name = c(\"John Doe\", \"Jane Doe\"),   age = c(30, 25),   stringsAsFactors = FALSE )  # xml_doc is a xml_fragment that contains a single root element doc <- xml_doc(   homeless = .tags(     .attr = c(year = \"1900\"),     data = .data(data, row_tag = \"person\")   ) )  doc #> {xml_doc,xml_fragment} #> <homeless year=\"1900\"><data><person><name>John Doe<\/name><age>30<\/age><\/person><..."},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"using-an-xmlbuilder-object","dir":"","previous_headings":"Example","what":"Using an xmlbuilder object","title":"Fast and Elegant XML Generation","text":"xmlbuilder object allows create xml documents feed-forward manner. xml_fragment one creates xml document structure one R list converts xml string xml2::xml_document, xmlbuilder one incremently builds xml document, without whole list structure memory. also provides functions output xml document, like adding prolog comment. provides following methods: start start new element end end current element element add element value comment add comment prolog add prolog fragment add fragment","code":"library(xmlwriter)  b <- xmlbuilder(allow_fragments = FALSE) b$comment(\"This is an xml comment\") b$start(\"homeless\")   b$start(\"person\", id = \"1\")     b$element(\"name\", \"John Doe\")     b$element(\"age\", 30)     b$start(\"address\")       b$element(\"street\", \"123 Main St\")       b$element(\"city\", \"Anytown\")       b$element(\"state\", \"CA\")       b$element(\"zip\", 12345)     b$end(\"address\")   b$end(\"person\")   b$start(\"person\", id = \"2\")     b$element(\"name\", \"Jane Doe\")     b$element(\"age\", 25)     b$start(\"address\")       b$element(\"street\", \"321 Main St\")       b$element(\"city\", \"Anytown\")       b$element(\"state\", \"CA\")       b$element(\"zip\", 54321)     b$end(\"address\")   b$end(\"person\")   b$fragment(     person = .tags(       .attr = c(id = \"3\"),       name = \"Jim Doe\",       age = 35     )   ) b$end(\"homeless\")  # includes a xml prolog and comment b #> {xmlbuilder} #> <?xml version='1.0' encoding='UTF-8'?><!--This is an xml comment--><homeless><person id=\"1\"><name>John Doe<\/name><age>30<\/age><address><street>123 Main St<\/street><city>Anytown<\/city><state>CA<\/state><zip>12345<\/zip><\/address><\/person><person id=\"2\"><name>Jane Doe<\/name><age>25<\/age><address><street>321 Main St<\/street><city>Anytown<\/city><state>CA<\/state><zip>54321<\/zip><\/address><\/person><person id=\"3\"><name>Jim Doe<\/name><age>35<\/age><\/person><\/homeless> as.character(b) #> [1] \"<?xml version='1.0' encoding='UTF-8'?><!--This is an xml comment--><homeless><person id=\\\"1\\\"><name>John Doe<\/name><age>30<\/age><address><street>123 Main St<\/street><city>Anytown<\/city><state>CA<\/state><zip>12345<\/zip><\/address><\/person><person id=\\\"2\\\"><name>Jane Doe<\/name><age>25<\/age><address><street>321 Main St<\/street><city>Anytown<\/city><state>CA<\/state><zip>54321<\/zip><\/address><\/person><person id=\\\"3\\\"><name>Jim Doe<\/name><age>35<\/age><\/person><\/homeless>\" # only contains the actual nodes xml2::as_xml_document(b) #> {xml_document} #> <homeless> #> [1] <person id=\"1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n  ... #> [2] <person id=\"2\">\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n  <address>\\n  ... #> [3] <person id=\"3\">\\n  <name>Jim Doe<\/name>\\n  <age>35<\/age>\\n<\/person>"},{"path":"https://edwindj.github.io/xmlwriter/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Fast and Elegant XML Generation","text":"xmlwriter optimized generating xml documents fragments R list structure identical xml2::as_list output.","code":"library(microbenchmark)  library(xml2) library(xmlwriter)  # read in a sample 600k xml file as a R list str doc <- xml2::read_xml(\"./example/DataGeneric.xml\") doc_list <- xml2::as_list(doc)  # copy of the list with an extra attribute class=\"xml_fragment\" (xmlwriter specific) doc_list2 <- structure(doc_list, class = \"xml_fragment\")  # see how long it takes to create an xml document with xml2 and xmlwriter  microbenchmark(   xml2 = xml2::as_xml_document(doc_list),   xmlwriter = xml2::as_xml_document(doc_list2),   times = 10 ) #> Warning in microbenchmark(xml2 = xml2::as_xml_document(doc_list), xmlwriter = #> xml2::as_xml_document(doc_list2), : less accurate nanosecond times to avoid #> potential integer overflows #> Unit: milliseconds #>       expr        min         lq       mean     median         uq        max #>       xml2 2405.03089 2454.09940 2464.97629 2460.49669 2483.65971 2529.20788 #>  xmlwriter   35.60879   35.74036   38.18791   37.24766   37.67248   47.16652 #>  neval #>     10 #>     10"},{"path":"https://edwindj.github.io/xmlwriter/reference/as.character.xml_fragment.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn an xml_fragment into a character — as.character.xml_fragment","title":"Turn an xml_fragment into a character — as.character.xml_fragment","text":"function turns xml_fragment character string, using performant c++ implementation.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/as.character.xml_fragment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn an xml_fragment into a character — as.character.xml_fragment","text":"","code":"# S3 method for class 'xml_fragment' as.character(x, ...)  # S3 method for class 'xml_doc' as.character(x, use_prolog = TRUE, ...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/as.character.xml_fragment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn an xml_fragment into a character — as.character.xml_fragment","text":"x object coerced tested. ... arguments passed methods. use_prolog TRUE xml prolog included. suppress prolog string either remove manually set use_prolog = FALSE.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/as_xml_nodeset.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms an xml_fragment into an xml_nodeset — as_xml_nodeset","title":"Transforms an xml_fragment into an xml_nodeset — as_xml_nodeset","text":"Using xml2 package, function transforms xml_fragment xml_nodeset","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/as_xml_nodeset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms an xml_fragment into an xml_nodeset — as_xml_nodeset","text":"","code":"as_xml_nodeset(x, ...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/as_xml_nodeset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms an xml_fragment into an xml_nodeset — as_xml_nodeset","text":"x object created xml_fragment() ... reserved future use","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list to an xml node — list_as_xml_document","title":"Convert a list to an xml node — list_as_xml_document","text":"list_as_xml_document fast efficient way convert list xml2::xml_node. preferred interface use xml_fragment() xml_doc() create xml fragments.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list to an xml node — list_as_xml_document","text":"","code":"list_as_xml_document(x, ...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list to an xml node — list_as_xml_document","text":"x list returned xml2::as_list() ... reserved future use","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list to an xml node — list_as_xml_document","text":"xml2::xml_document","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a list to an xml node — list_as_xml_document","text":"list_to_xml_node much faster implementation xml2::as_xml_document.list() method. writes xml directly string buffer reads back xml2::xml_document. provides convenient interface. function can used tandem xml2::as_list() convert R data structures.","code":""},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_document.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a list to an xml node — list_as_xml_document","text":"","code":"data <-   list(     study = list(       person = list(         name = \"John Doe\",         age = \"30\"       ),       person = list(         name = \"Jane Doe\",         age = \"25\"       )     )   )  list_as_xml_string(data) #> [1] \"<study><person><name>John Doe<\/name><age>30<\/age><\/person><person><name>Jane Doe<\/name><age>25<\/age><\/person><\/study>\" if (require(\"xml2\")){   list_as_xml_document(data) } #> Loading required package: xml2 #> {xml_document} #> <study> #> [1] <person>\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n<\/person> #> [2] <person>\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n<\/person>  #note the xml_fragment function is more powerful to create lists  data <- xml_doc(   study = .tags(     .attr = c(id = \"1\"),     person = .tags(       name = \"John Doe\",       age = \"30\"     ),     person = .tags(       name = \"Jane Doe\",       age = \"25\"     ),     \"This is a text node\"   ) ) |> unclass()  list_as_xml_string(data) #> [1] \"<study id=\\\"1\\\"><person><name>John Doe<\/name><age>30<\/age><\/person><person><name>Jane Doe<\/name><age>25<\/age><\/person>This is a text node<\/study>\""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list to an xml string — list_as_xml_string","title":"Convert a list to an xml string — list_as_xml_string","text":"list_to_xml_string fast efficient way convert specific list xml string. preferred interface use xml_fragment() xml_doc() create xml fragments.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list to an xml string — list_as_xml_string","text":"","code":"list_as_xml_string(x, ...)"},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list to an xml string — list_as_xml_string","text":"x list returned xml2::as_list() ... reserved future use","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_string.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a list to an xml string — list_as_xml_string","text":"function working horse turning xml_fragment(), xml_doc() list object character xml strings xml2::xml_document objects. input list format identical format returned xml2::as_list() function, much faster generating xml string . writes xml directly string buffer. function allows easy conversion R data structures xml format creating list structures R converting xml. function can used tandem xml2::as_list() convert R data structures.","code":""},{"path":[]},{"path":"https://edwindj.github.io/xmlwriter/reference/list_as_xml_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a list to an xml string — list_as_xml_string","text":"","code":"data <-   list(     study = list(       person = list(         name = \"John Doe\",         age = \"30\"       ),       person = list(         name = \"Jane Doe\",         age = \"25\"       )     )   )  list_as_xml_string(data) #> [1] \"<study><person><name>John Doe<\/name><age>30<\/age><\/person><person><name>Jane Doe<\/name><age>25<\/age><\/person><\/study>\" if (require(\"xml2\")){   list_as_xml_document(data) } #> {xml_document} #> <study> #> [1] <person>\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n<\/person> #> [2] <person>\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n<\/person>  #note the xml_fragment function is more powerful to create lists  data <- xml_doc(   study = .tags(     .attr = c(id = \"1\"),     person = .tags(       name = \"John Doe\",       age = \"30\"     ),     person = .tags(       name = \"Jane Doe\",       age = \"25\"     ),     \"This is a text node\"   ) ) |> unclass()  list_as_xml_string(data) #> [1] \"<study id=\\\"1\\\"><person><name>John Doe<\/name><age>30<\/age><\/person><person><name>Jane Doe<\/name><age>25<\/age><\/person>This is a text node<\/study>\""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create elegantly an XML fragment — .tags","title":"Create elegantly an XML fragment — .tags","text":"Create xml fragment using readable R syntax, can used create string, xml2::xml_document building block complex XML documents.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create elegantly an XML fragment — .tags","text":"","code":".tags(..., .attr = NULL)  .data(df, row_tag = \"obs\")  xml_fragment(..., .attr = character())  xml_doc(..., .attr = character())"},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create elegantly an XML fragment — .tags","text":"... nest named elements characters include fragment (see example) .attr attributes set root element df data frame stored set xml elements row_tag name row tag","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create elegantly an XML fragment — .tags","text":"xml_fragment, list object can converted xml2::xml_document character string","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create elegantly an XML fragment — .tags","text":"xml_fragment built using named .tags elements, name tag name, value contents tag. contents can nested .tags object, character string numeric value. .attr attributes, set current element, .tags specified unnamed elements, added text nodes. .data function can used convert data.frame xml fragment xml_doc special case xml_fragment contains exactly one root element, errors case. resulting xml_fragment object can converted xml2::xml_document xml2::as_xml_document() character string .character(). methods fast using performant c++ implementation.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xml_fragment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create elegantly an XML fragment — .tags","text":"","code":"doc <- xml_fragment(   study = .tags(     .attr = c(id=\"1\"),     person = .tags(       .attr = c(id = \"p1\"),       name = \"John Doe\",       age = 30     ),     person = .tags(       name = \"Jane Doe\",       age = 25,       address = .tags(street = \"123 Main St\", city = \"Springfield\"),       \"This is a text node\"     )   ) )  print(doc) #> {xml_fragment} #> <study id=\"1\"><person id=\"p1\"><name>John Doe<\/name><age>30<\/age><\/person><person...  if (require(\"xml2\")){   as_xml_document(doc) } #> {xml_document} #> <study id=\"1\"> #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n<\/person> #> [2] <person><name>Jane Doe<\/name><age>25<\/age><address><street>123 Main St<\/s ...  # you can also create a function to generate xml elements, # but remember that the enconsing element name must be used outside the # function person <- function(name, age, id){   .tags(     # xml attributes can be speficied with .attr     .attr = c(id = id),     name = name,     age = age,     address = .tags(street = \"123 Main St\", city = \"Springfield\")   ) }  # xml_doc is a xml_fragment with the restriction of having one root element doc2 <- xml_doc(   study = .tags(     # you need to specify \"person\" as the name for each element     person = person(\"John Doe\", 30, id = \"p1\"),     person = person(\"Jane Doe\", 25, id = \"p2\")   ) )  print(doc2) #> {xml_doc,xml_fragment} #> <study><person id=\"p1\"><name>John Doe<\/name><age>30<\/age><address><street>123 Ma...  if (require(\"xml2\")){   as_xml_document(doc2) } #> {xml_document} #> <study> #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n ... #> [2] <person id=\"p2\">\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n  <address>\\n ...  # a fragment can have multiple root elements fgmt <- xml_fragment(   person = person(\"John Doe\", 30, id = \"p1\"),   person = person(\"Jane Doe\", 25, id = \"p2\") )  print(fgmt) #> {xml_fragment (2)} #> [1]<person id=\"p1\"><name>John Doe<\/name><age>30<\/age><address><street>123 Main St<\/... #> [2]<person id=\"p2\"><name>Jane Doe<\/name><age>25<\/age><address><street>123 Main St<\/... #> ...  if (require(\"xml2\")){   # as_xml_document won't work because it expects a single root element,   # so we retrieve a nodeset instead   as_xml_nodeset(fgmt) } #> {xml_nodeset (2)} #> [1] <person id=\"p1\">\\n  <name>John Doe<\/name>\\n  <age>30<\/age>\\n  <address>\\n ... #> [2] <person id=\"p2\">\\n  <name>Jane Doe<\/name>\\n  <age>25<\/age>\\n  <address>\\n ...  iris_xml <- xml_doc(   fieldstudy = .tags(     .attr = c(id = \"iris\", doi =\"10.1111/j.1469-1809.1936.tb02137.x\"),     source = \"Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.\",     data = .data(iris, row_tag = \"obs\")   ) )  print(iris_xml, max_characters = 300) #> {xml_doc,xml_fragment} #> <fieldstudy id=\"iris\" doi=\"10.1111/j.1469-1809.1936.tb02137.x\"><source>Fisher, R. A. (1936) The use of multiple measurements in #> taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.<\/source><data><obs><Sepal.Length>5.1<\/Sepal.Length><Sepal.Width>3.5<\/Sepal.Width><Petal.Length>1.4<\/Petal.Lengt...   if (require(\"xml2\")){   as_xml_document(iris_xml) } #> {xml_document} #> <fieldstudy id=\"iris\" doi=\"10.1111/j.1469-1809.1936.tb02137.x\"> #> [1] <source>Fisher, R. A. (1936) The use of multiple measurements in\\ntaxonom ... #> [2] <data>\\n  <obs>\\n    <Sepal.Length>5.1<\/Sepal.Length>\\n    <Sepal.Width>3 ..."},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a fast feed-forward XML builder — xmlbuilder","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"function creates XML builder allows create XML documents feed-forward manner. xmlbuilder returns object methods create XML elements, text nodes, comments, .","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"","code":"xmlbuilder(allow_fragments = TRUE, use_prolog = !allow_fragments)"},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"allow_fragments logical. warning issued XML document multiple root elements? Set FALSE suppress creating multiple xml fragments. use_prolog logical. XML prolog included output? Default TRUE, generate UTF-8 xml prolog. Set FALSE want generate xml fragment manually prepend prolog.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"object class `xmlbuilder","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"$start(tag, ...) ($start_element) starts element given tag attributes. $end() ($end_element) ends current element. $element(tag, text, ...) creates element given tag, text, attributes. $text(text) creates text node. $fragment(..., .attr) writes xml fragment . $comment(comment) creates comment node. $to_xml_string() returns XML document fragments(s) character vector.","code":""},{"path":"https://edwindj.github.io/xmlwriter/reference/xmlbuilder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a fast feed-forward XML builder — xmlbuilder","text":"","code":"b <-xmlbuilder()  b$start(\"root\")   b$element(\"child1\", \"text1\", attr1 = \"value1\")   b$element(\"child2\", \"text2\", attr2 = \"value2\")   b$start(\"child3\", attr3 = \"value3\")     b$text(\"text3\")     b$element(\"child4\", \"text3\", attr4 = \"value4\")   b$end(\"child3\") b$end(\"root\")  print(b) #> {xmlbuilder} #> <root><child1 attr1=\"value1\">text1<\/child1><child2 attr2=\"value2\">text2<\/child2><child3 attr3=\"value3\">text3<child4 attr4=\"value4\">text3<\/child4><\/child3><\/root>  if (require(\"xml2\")) {   # a builder can be converted to an xml_document using   doc <- as_xml_document(b)    # or equivalentlty   doc <-     b$to_xml_string() |>     read_xml() }  # build some xml fragments fms <- xmlbuilder(allow_fragments = TRUE)  fms$start(\"person\", id = \"1\")   fms$element(\"name\", \"John Doe\")   fms$element(\"age\", 30) fms$end(\"person\")  fms$start(\"person\", id = \"2\")   fms$element(\"name\", \"Jane Doe\")   fms$element(\"age\", 25) fms$end(\"person\")  fms$start(\"person\", id = \"3\")   fms$element(\"name\", \"Jim Doe\")   fms$element(\"age\", 35) fms$end(\"person\")  s <- fms$to_xml_string() as.character(fms) #> [1] \"<person id=\\\"1\\\"><name>John Doe<\/name><age>30<\/age><\/person>\" #> [2] \"<person id=\\\"2\\\"><name>Jane Doe<\/name><age>25<\/age><\/person>\" #> [3] \"<person id=\\\"3\\\"><name>Jim Doe<\/name><age>35<\/age><\/person>\"  length(s) # three fragments #> [1] 3  # print xml string of the second fragment print(s[2]) #> [1] \"<person id=\\\"2\\\"><name>Jane Doe<\/name><age>25<\/age><\/person>\"  if (require(\"xml2\")){   # convert to xml_nodes   nodes <- fms$to_xml_node_list()   length(nodes) # three nodes   # show the second xml_node   print(nodes[[2]]) } #> {xml_document} #> <person id=\"2\"> #> [1] <name>Jane Doe<\/name> #> [2] <age>25<\/age>  # use fragments xb <- xmlbuilder()  xb$start(\"study\") xb$fragment(   person = .tags(     name = \"John Doe\",     age = 30   ),   person = .tags(     name = \"Jane Doe\",     age = 25   ) ) xb$end(\"study\") xb #> {xmlbuilder} #> <study><person><name>John Doe<\/name><age>30<\/age><\/person><person><name>Jane Doe<\/name><age>25<\/age><\/person><\/study>"}]
